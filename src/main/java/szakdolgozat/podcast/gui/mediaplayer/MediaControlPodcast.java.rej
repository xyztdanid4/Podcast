diff a/src/main/java/szakdolgozat/podcast/gui/mediaplayer/MediaControlPodcast.java b/src/main/java/szakdolgozat/podcast/gui/mediaplayer/MediaControlPodcast.java	(rejected hunks)
@@ -78,36 +78,67 @@
 	public void stop() {
 		if (!firstRun) {
 			mediaPlayer.stop();
-			// mediaPlayer.currentTimeProperty().removeListener();
 		}
 		firstRun = false;
 	}
 
 	public MediaControlPodcast() {
-		final HBox mediaButtonVolume = new HBox(10);
-		final HBox mediaSlider = new HBox(10);
-		setMargin(mediaButtonVolume, new Insets(5));
-		setMargin(mediaSlider, new Insets(5));
-
-		playButton = MediaButtonBuilder.create().image(PLAYBUTTONURL).build();
-		pauseButton = MediaButtonBuilder.create().image(PAUSEBUTTONURL).build();
-		prevButton = MediaButtonBuilder.create().image(PREVBUTTONURL).build();
-		nextButton = MediaButtonBuilder.create().image(NEXTBUTTONURL).build();
-		volumeLabel = LabelBuilder.create().text(VOLUMELABEL_TEXT).build();
-		volumeSlider = new Slider();
-		timeSlider = new Slider();
-		timeSlider.setPrefWidth(600);
-		playedTime = TextBuilder.create().smallText("00:00:00").build();
-
-		mediaButtonVolume.getChildren().addAll(prevButton, pauseButton, playButton, nextButton, volumeLabel,
-				volumeSlider);
-		mediaButtonVolume.setAlignment(Pos.CENTER);
-
-		mediaSlider.getChildren().addAll(playedTime, timeSlider);
+		//-.-off
+		final Button playButton = MediaButtonBuilder.create()
+													.image(PLAYBUTTONURL)
+													.build();
+		
+		final Button pauseButton = MediaButtonBuilder.create()
+													.image(PAUSEBUTTONURL)
+													.build();
+		
+		final Button prevButton = MediaButtonBuilder.create()
+													.image(PREVBUTTONURL)
+													.build();
+		
+		final Button nextButton = MediaButtonBuilder.create()
+													.image(NEXTBUTTONURL)
+													.build();
+		
+		final Slider volumeSlider = SliderBuilder.create()
+												.build();
+		
+		final Slider timeSlider = SliderBuilder.create()
+												.build();
+		timeSlider.setPrefWidth(MediaControlDecorator.TIMESLIDER);
+		
+		final Text playedTime = TextBuilder.create()
+											.smallText(_00_00_00)
+											.build();
+		
+		final CheckBox repeatCheckBox = CheckBoxBuilder.create()
+														.text(REPEAT2)
+														.setDefaultValue(false)
+														.build();
+		
+		final HBox mediaButtonVolumeHBox = HBoxBuilder.create()
+													.noButton(prevButton)
+													.noButton(pauseButton)
+													.noButton(playButton)
+													.noButton(nextButton)
+													.noLabel(LabelBuilder.create()
+																		.text(VOLUMELABEL_TEXT)
+																		.build())
+													.slider(volumeSlider)
+													.build();
+		mediaButtonVolumeHBox.setAlignment(Pos.CENTER);
+		setMargin(mediaButtonVolumeHBox, new Insets(MediaControlDecorator.PADDING));
+		
+		final HBox mediaSlider = HBoxBuilder.create()
+											.noText(playedTime)
+											.slider(timeSlider)
+											.checkBox(repeatCheckBox)
+											.build();
 		mediaSlider.setAlignment(Pos.CENTER);
-		mediaSlider.setPadding(new Insets(10, 0, 5, 0));
+		setMargin(mediaSlider, new Insets(MediaControlDecorator.PADDING));
+		//-.-on
 
-		getChildren().addAll(mediaSlider, mediaButtonVolume);
+		getChildren().addAll(mediaSlider, mediaButtonVolumeHBox);
 		decorateVBox(this);
 	}
 
